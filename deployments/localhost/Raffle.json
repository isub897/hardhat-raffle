{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entryFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "updateInterval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnough",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransactionFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "raffleBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RandomWinnerRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recentWinner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCallbackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGasLane",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSubId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVRFCoordinator",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_entryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5974f52a25a4e43b3d8aed73e70e67bbc646e443c93d5f113cb2be12b8221098",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1316740",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x6ffbf3d2443bc99a42f0545565f98e484d251ff2e2338420f73eb0b7f8d79d30",
    "transactionHash": "0x5974f52a25a4e43b3d8aed73e70e67bbc646e443c93d5f113cb2be12b8221098",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1316740",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "10000000000000000",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "1",
    "200000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "e2f1a98d480d3902c9e49558ecb62ae3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entryFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"updateInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnough\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransactionFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RandomWinnerRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recentWinner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCallbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasLane\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVRFCoordinator\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_entryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\\\";\\n\\nerror Raffle__NotEnough();\\nerror Raffle__TransactionFailed();\\nerror Raffle__UpkeepNotNeeded(\\n    uint256 raffleBalance,\\n    uint256 numPlayers,\\n    uint256 raffleState\\n);\\nerror Raffle__NotOpen();\\n\\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    /* Type Declarations */\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    /* State Variables */\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinatorV2;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    /* Lottery Variables */\\n    uint256 public immutable i_entryFee;\\n    address payable[] private s_players;\\n    address private s_recentWinner;\\n    uint256 private s_lastTimeStamp;\\n    uint256 private immutable i_interval;\\n    RaffleState private s_raffleState;\\n\\n    /* Events */\\n    event RaffleEnter(address indexed player);\\n    event RandomWinnerRequest(uint256 indexed requestId);\\n    event WinnerPicked(address indexed recentWinner);\\n\\n    /* Functions */\\n    constructor(\\n        uint256 entryFee,\\n        address vrfCoordinator,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 updateInterval\\n    ) VRFConsumerBaseV2(vrfCoordinator) {\\n        i_entryFee = entryFee;\\n        i_vrfCoordinatorV2 = VRFCoordinatorV2Interface(vrfCoordinator);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_lastTimeStamp = block.timestamp;\\n        i_interval = updateInterval;\\n        s_raffleState = RaffleState.OPEN;\\n    }\\n\\n    function enterRaffle() public payable {\\n        if (msg.value < i_entryFee) revert Raffle__NotEnough();\\n        if (s_raffleState == RaffleState.CALCULATING) revert Raffle__NotOpen();\\n        s_players.push(payable(msg.sender));\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        bool isTime = (block.timestamp - s_lastTimeStamp) > i_interval;\\n        bool isOpen = s_raffleState == RaffleState.OPEN;\\n        bool isPlayers = s_players.length > 0;\\n        upkeepNeeded = (isTime && isOpen && isPlayers);\\n    }\\n\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Raffle__UpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_raffleState)\\n            );\\n        }\\n        s_raffleState = RaffleState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinatorV2.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RandomWinnerRequest(requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256, /* requestId */\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_raffleState = RaffleState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        s_players = new address payable[](0);\\n        (bool sent, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!sent) revert Raffle__TransactionFailed();\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    /* View / Pure Functions */\\n    function getEntryFee() public view returns (uint256) {\\n        return i_entryFee;\\n    }\\n\\n    function getVRFCoordinator()\\n        public\\n        view\\n        returns (VRFCoordinatorV2Interface)\\n    {\\n        return i_vrfCoordinatorV2;\\n    }\\n\\n    function getGasLane() public view returns (bytes32) {\\n        return i_gasLane;\\n    }\\n\\n    function getSubId() public view returns (uint64) {\\n        return i_subscriptionId;\\n    }\\n\\n    function getCallbackGasLimit() public view returns (uint32) {\\n        return i_callbackGasLimit;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getLastTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n}\\n\\n// 15:51:20\\n\",\"keccak256\":\"0xa4a9cea2a11c56b6de1397066cfd17185e818aaddc8d2173fc935d76fe2d70f5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162001a3838038062001a38833981810160405281019062000038919062000294565b848073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508561012081815250508473ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508360c081815250508267ffffffffffffffff1660e08167ffffffffffffffff16815250508163ffffffff166101008163ffffffff1681525050426002819055508061014081815250506000600360006101000a81548160ff021916908360018111156200011d576200011c62000330565b5b02179055505050505050506200035f565b600080fd5b6000819050919050565b620001488162000133565b81146200015457600080fd5b50565b60008151905062000168816200013d565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200019b826200016e565b9050919050565b620001ad816200018e565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600067ffffffffffffffff82169050919050565b6200022d816200020e565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000157565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200027d565b92505060a06200032389828a0162000157565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161014051611646620003f26000396000818161083401526108cb0152600081816103aa015281816104a501526109bc015260008181610749015261094d01526000818161072601526109e4015260008181610705015261091b0152600081816106c901526108f30152600081816103e5015261043901526116466000f3fe6080604052600436106100f35760003560e01c8063a378f3711161008a578063e55ae4e811610059578063e55ae4e8146102ea578063e586a4f014610327578063fbc6ba6f14610352578063fd6673f51461037d576100f3565b8063a378f3711461023e578063c19dd76b14610269578063c1c244e814610294578063de8be8e7146102bf576100f3565b80634585e33b116100c65780634585e33b14610181578063473f1ddc146101aa5780636e04ff0d146101d557806391ad27b414610213576100f3565b8063044cbce3146100f8578063115cbaf5146101235780631fe543e31461014e5780632cfcc53914610177575b600080fd5b34801561010457600080fd5b5061010d6103a8565b60405161011a9190610d05565b60405180910390f35b34801561012f57600080fd5b506101386103cc565b6040516101459190610d97565b60405180910390f35b34801561015a57600080fd5b5061017560048036038101906101709190610f4b565b6103e3565b005b61017f6104a3565b005b34801561018d57600080fd5b506101a860048036038101906101a39190611002565b610611565b005b3480156101b657600080fd5b506101bf610802565b6040516101cc9190611090565b60405180910390f35b3480156101e157600080fd5b506101fc60048036038101906101f79190611160565b61082c565b60405161020a929190611243565b60405180910390f35b34801561021f57600080fd5b506102286108c7565b6040516102359190610d05565b60405180910390f35b34801561024a57600080fd5b506102536108ef565b60405161026091906112d2565b60405180910390f35b34801561027557600080fd5b5061027e610917565b60405161028b9190611306565b60405180910390f35b3480156102a057600080fd5b506102a961093f565b6040516102b69190610d05565b60405180910390f35b3480156102cb57600080fd5b506102d4610949565b6040516102e19190611340565b60405180910390f35b3480156102f657600080fd5b50610311600480360381019061030c919061135b565b610971565b60405161031e9190611090565b60405180910390f35b34801561033357600080fd5b5061033c6109b8565b6040516103499190610d05565b60405180910390f35b34801561035e57600080fd5b506103676109e0565b60405161037491906113ab565b60405180910390f35b34801561038957600080fd5b50610392610a08565b60405161039f9190610d05565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600360009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461049557337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161048c9291906113c6565b60405180910390fd5b61049f8282610a14565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156104fd576040517fe83304fa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001808111156105105761050f610d20565b5b600360009054906101000a900460ff16600181111561053257610531610d20565b5b03610569576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b600061062b6040518060200160405280600081525061082c565b5090508061069a5747600080549050600360009054906101000a900460ff16600181111561065c5761065b610d20565b5b6040517f584327aa000000000000000000000000000000000000000000000000000000008152600401610691939291906113ef565b60405180910390fd5b6001600360006101000a81548160ff021916908360018111156106c0576106bf610d20565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161078a959493929190611443565b6020604051808303816000875af11580156107a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cd91906114ab565b9050807f22578e7c9f4589d02e41404606e828e2076db3a91811ebab7d80cb87a491d13b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000606060007f0000000000000000000000000000000000000000000000000000000000000000600254426108619190611507565b119050600080600181111561087957610878610d20565b5b600360009054906101000a900460ff16600181111561089b5761089a610d20565b5b1490506000806000805490501190508280156108b45750815b80156108bd5750805b9450505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600254905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008082815481106109865761098561153b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008080549050905090565b6000808054905082600081518110610a2f57610a2e61153b565b5b6020026020010151610a419190611599565b90506000808281548110610a5857610a5761153b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360006101000a81548160ff02191690836001811115610aec57610aeb610d20565b5b021790555042600281905550600067ffffffffffffffff811115610b1357610b12610e08565b5b604051908082528060200260200182016040528015610b415781602001602082028036833780820191505090505b5060009080519060200190610b57929190610c45565b5060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b7e906115fb565b60006040518083038185875af1925050503d8060008114610bbb576040519150601f19603f3d011682016040523d82523d6000602084013e610bc0565b606091505b5050905080610bfb576040517f8dea0f0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610cbe579160200282015b82811115610cbd5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c65565b5b509050610ccb9190610ccf565b5090565b5b80821115610ce8576000816000905550600101610cd0565b5090565b6000819050919050565b610cff81610cec565b82525050565b6000602082019050610d1a6000830184610cf6565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d6057610d5f610d20565b5b50565b6000819050610d7182610d4f565b919050565b6000610d8182610d63565b9050919050565b610d9181610d76565b82525050565b6000602082019050610dac6000830184610d88565b92915050565b6000604051905090565b600080fd5b600080fd5b610dcf81610cec565b8114610dda57600080fd5b50565b600081359050610dec81610dc6565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e4082610df7565b810181811067ffffffffffffffff82111715610e5f57610e5e610e08565b5b80604052505050565b6000610e72610db2565b9050610e7e8282610e37565b919050565b600067ffffffffffffffff821115610e9e57610e9d610e08565b5b602082029050602081019050919050565b600080fd5b6000610ec7610ec284610e83565b610e68565b90508083825260208201905060208402830185811115610eea57610ee9610eaf565b5b835b81811015610f135780610eff8882610ddd565b845260208401935050602081019050610eec565b5050509392505050565b600082601f830112610f3257610f31610df2565b5b8135610f42848260208601610eb4565b91505092915050565b60008060408385031215610f6257610f61610dbc565b5b6000610f7085828601610ddd565b925050602083013567ffffffffffffffff811115610f9157610f90610dc1565b5b610f9d85828601610f1d565b9150509250929050565b600080fd5b60008083601f840112610fc257610fc1610df2565b5b8235905067ffffffffffffffff811115610fdf57610fde610fa7565b5b602083019150836001820283011115610ffb57610ffa610eaf565b5b9250929050565b6000806020838503121561101957611018610dbc565b5b600083013567ffffffffffffffff81111561103757611036610dc1565b5b61104385828601610fac565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061107a8261104f565b9050919050565b61108a8161106f565b82525050565b60006020820190506110a56000830184611081565b92915050565b600080fd5b600067ffffffffffffffff8211156110cb576110ca610e08565b5b6110d482610df7565b9050602081019050919050565b82818337600083830152505050565b60006111036110fe846110b0565b610e68565b90508281526020810184848401111561111f5761111e6110ab565b5b61112a8482856110e1565b509392505050565b600082601f83011261114757611146610df2565b5b81356111578482602086016110f0565b91505092915050565b60006020828403121561117657611175610dbc565b5b600082013567ffffffffffffffff81111561119457611193610dc1565b5b6111a084828501611132565b91505092915050565b60008115159050919050565b6111be816111a9565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111fe5780820151818401526020810190506111e3565b60008484015250505050565b6000611215826111c4565b61121f81856111cf565b935061122f8185602086016111e0565b61123881610df7565b840191505092915050565b600060408201905061125860008301856111b5565b818103602083015261126a818461120a565b90509392505050565b6000819050919050565b600061129861129361128e8461104f565b611273565b61104f565b9050919050565b60006112aa8261127d565b9050919050565b60006112bc8261129f565b9050919050565b6112cc816112b1565b82525050565b60006020820190506112e760008301846112c3565b92915050565b6000819050919050565b611300816112ed565b82525050565b600060208201905061131b60008301846112f7565b92915050565b600063ffffffff82169050919050565b61133a81611321565b82525050565b60006020820190506113556000830184611331565b92915050565b60006020828403121561137157611370610dbc565b5b600061137f84828501610ddd565b91505092915050565b600067ffffffffffffffff82169050919050565b6113a581611388565b82525050565b60006020820190506113c0600083018461139c565b92915050565b60006040820190506113db6000830185611081565b6113e86020830184611081565b9392505050565b60006060820190506114046000830186610cf6565b6114116020830185610cf6565b61141e6040830184610cf6565b949350505050565b600061ffff82169050919050565b61143d81611426565b82525050565b600060a08201905061145860008301886112f7565b611465602083018761139c565b6114726040830186611434565b61147f6060830185611331565b61148c6080830184611331565b9695505050505050565b6000815190506114a581610dc6565b92915050565b6000602082840312156114c1576114c0610dbc565b5b60006114cf84828501611496565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061151282610cec565b915061151d83610cec565b9250828203905081811115611535576115346114d8565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006115a482610cec565b91506115af83610cec565b9250826115bf576115be61156a565b5b828206905092915050565b600081905092915050565b50565b60006115e56000836115ca565b91506115f0826115d5565b600082019050919050565b6000611606826115d8565b915081905091905056fea2646970667358221220a683f91f3f45a08106d9fb12e00ae49c65db94761e96008ddbfdc79f63a73cb264736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c8063a378f3711161008a578063e55ae4e811610059578063e55ae4e8146102ea578063e586a4f014610327578063fbc6ba6f14610352578063fd6673f51461037d576100f3565b8063a378f3711461023e578063c19dd76b14610269578063c1c244e814610294578063de8be8e7146102bf576100f3565b80634585e33b116100c65780634585e33b14610181578063473f1ddc146101aa5780636e04ff0d146101d557806391ad27b414610213576100f3565b8063044cbce3146100f8578063115cbaf5146101235780631fe543e31461014e5780632cfcc53914610177575b600080fd5b34801561010457600080fd5b5061010d6103a8565b60405161011a9190610d05565b60405180910390f35b34801561012f57600080fd5b506101386103cc565b6040516101459190610d97565b60405180910390f35b34801561015a57600080fd5b5061017560048036038101906101709190610f4b565b6103e3565b005b61017f6104a3565b005b34801561018d57600080fd5b506101a860048036038101906101a39190611002565b610611565b005b3480156101b657600080fd5b506101bf610802565b6040516101cc9190611090565b60405180910390f35b3480156101e157600080fd5b506101fc60048036038101906101f79190611160565b61082c565b60405161020a929190611243565b60405180910390f35b34801561021f57600080fd5b506102286108c7565b6040516102359190610d05565b60405180910390f35b34801561024a57600080fd5b506102536108ef565b60405161026091906112d2565b60405180910390f35b34801561027557600080fd5b5061027e610917565b60405161028b9190611306565b60405180910390f35b3480156102a057600080fd5b506102a961093f565b6040516102b69190610d05565b60405180910390f35b3480156102cb57600080fd5b506102d4610949565b6040516102e19190611340565b60405180910390f35b3480156102f657600080fd5b50610311600480360381019061030c919061135b565b610971565b60405161031e9190611090565b60405180910390f35b34801561033357600080fd5b5061033c6109b8565b6040516103499190610d05565b60405180910390f35b34801561035e57600080fd5b506103676109e0565b60405161037491906113ab565b60405180910390f35b34801561038957600080fd5b50610392610a08565b60405161039f9190610d05565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600360009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461049557337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161048c9291906113c6565b60405180910390fd5b61049f8282610a14565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156104fd576040517fe83304fa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001808111156105105761050f610d20565b5b600360009054906101000a900460ff16600181111561053257610531610d20565b5b03610569576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b600061062b6040518060200160405280600081525061082c565b5090508061069a5747600080549050600360009054906101000a900460ff16600181111561065c5761065b610d20565b5b6040517f584327aa000000000000000000000000000000000000000000000000000000008152600401610691939291906113ef565b60405180910390fd5b6001600360006101000a81548160ff021916908360018111156106c0576106bf610d20565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161078a959493929190611443565b6020604051808303816000875af11580156107a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cd91906114ab565b9050807f22578e7c9f4589d02e41404606e828e2076db3a91811ebab7d80cb87a491d13b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000606060007f0000000000000000000000000000000000000000000000000000000000000000600254426108619190611507565b119050600080600181111561087957610878610d20565b5b600360009054906101000a900460ff16600181111561089b5761089a610d20565b5b1490506000806000805490501190508280156108b45750815b80156108bd5750805b9450505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600254905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008082815481106109865761098561153b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008080549050905090565b6000808054905082600081518110610a2f57610a2e61153b565b5b6020026020010151610a419190611599565b90506000808281548110610a5857610a5761153b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360006101000a81548160ff02191690836001811115610aec57610aeb610d20565b5b021790555042600281905550600067ffffffffffffffff811115610b1357610b12610e08565b5b604051908082528060200260200182016040528015610b415781602001602082028036833780820191505090505b5060009080519060200190610b57929190610c45565b5060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b7e906115fb565b60006040518083038185875af1925050503d8060008114610bbb576040519150601f19603f3d011682016040523d82523d6000602084013e610bc0565b606091505b5050905080610bfb576040517f8dea0f0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610cbe579160200282015b82811115610cbd5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c65565b5b509050610ccb9190610ccf565b5090565b5b80821115610ce8576000816000905550600101610cd0565b5090565b6000819050919050565b610cff81610cec565b82525050565b6000602082019050610d1a6000830184610cf6565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d6057610d5f610d20565b5b50565b6000819050610d7182610d4f565b919050565b6000610d8182610d63565b9050919050565b610d9181610d76565b82525050565b6000602082019050610dac6000830184610d88565b92915050565b6000604051905090565b600080fd5b600080fd5b610dcf81610cec565b8114610dda57600080fd5b50565b600081359050610dec81610dc6565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e4082610df7565b810181811067ffffffffffffffff82111715610e5f57610e5e610e08565b5b80604052505050565b6000610e72610db2565b9050610e7e8282610e37565b919050565b600067ffffffffffffffff821115610e9e57610e9d610e08565b5b602082029050602081019050919050565b600080fd5b6000610ec7610ec284610e83565b610e68565b90508083825260208201905060208402830185811115610eea57610ee9610eaf565b5b835b81811015610f135780610eff8882610ddd565b845260208401935050602081019050610eec565b5050509392505050565b600082601f830112610f3257610f31610df2565b5b8135610f42848260208601610eb4565b91505092915050565b60008060408385031215610f6257610f61610dbc565b5b6000610f7085828601610ddd565b925050602083013567ffffffffffffffff811115610f9157610f90610dc1565b5b610f9d85828601610f1d565b9150509250929050565b600080fd5b60008083601f840112610fc257610fc1610df2565b5b8235905067ffffffffffffffff811115610fdf57610fde610fa7565b5b602083019150836001820283011115610ffb57610ffa610eaf565b5b9250929050565b6000806020838503121561101957611018610dbc565b5b600083013567ffffffffffffffff81111561103757611036610dc1565b5b61104385828601610fac565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061107a8261104f565b9050919050565b61108a8161106f565b82525050565b60006020820190506110a56000830184611081565b92915050565b600080fd5b600067ffffffffffffffff8211156110cb576110ca610e08565b5b6110d482610df7565b9050602081019050919050565b82818337600083830152505050565b60006111036110fe846110b0565b610e68565b90508281526020810184848401111561111f5761111e6110ab565b5b61112a8482856110e1565b509392505050565b600082601f83011261114757611146610df2565b5b81356111578482602086016110f0565b91505092915050565b60006020828403121561117657611175610dbc565b5b600082013567ffffffffffffffff81111561119457611193610dc1565b5b6111a084828501611132565b91505092915050565b60008115159050919050565b6111be816111a9565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111fe5780820151818401526020810190506111e3565b60008484015250505050565b6000611215826111c4565b61121f81856111cf565b935061122f8185602086016111e0565b61123881610df7565b840191505092915050565b600060408201905061125860008301856111b5565b818103602083015261126a818461120a565b90509392505050565b6000819050919050565b600061129861129361128e8461104f565b611273565b61104f565b9050919050565b60006112aa8261127d565b9050919050565b60006112bc8261129f565b9050919050565b6112cc816112b1565b82525050565b60006020820190506112e760008301846112c3565b92915050565b6000819050919050565b611300816112ed565b82525050565b600060208201905061131b60008301846112f7565b92915050565b600063ffffffff82169050919050565b61133a81611321565b82525050565b60006020820190506113556000830184611331565b92915050565b60006020828403121561137157611370610dbc565b5b600061137f84828501610ddd565b91505092915050565b600067ffffffffffffffff82169050919050565b6113a581611388565b82525050565b60006020820190506113c0600083018461139c565b92915050565b60006040820190506113db6000830185611081565b6113e86020830184611081565b9392505050565b60006060820190506114046000830186610cf6565b6114116020830185610cf6565b61141e6040830184610cf6565b949350505050565b600061ffff82169050919050565b61143d81611426565b82525050565b600060a08201905061145860008301886112f7565b611465602083018761139c565b6114726040830186611434565b61147f6060830185611331565b61148c6080830184611331565b9695505050505050565b6000815190506114a581610dc6565b92915050565b6000602082840312156114c1576114c0610dbc565b5b60006114cf84828501611496565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061151282610cec565b915061151d83610cec565b9250828203905081811115611535576115346114d8565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006115a482610cec565b91506115af83610cec565b9250826115bf576115be61156a565b5b828206905092915050565b600081905092915050565b50565b60006115e56000836115ca565b91506115f0826115d5565b600082019050919050565b6000611606826115d8565b915081905091905056fea2646970667358221220a683f91f3f45a08106d9fb12e00ae49c65db94761e96008ddbfdc79f63a73cb264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 257,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 259,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 261,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 266,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 0,
        "slot": "3",
        "type": "t_enum(RaffleState)237"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)237": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}